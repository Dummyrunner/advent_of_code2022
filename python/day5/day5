from ipdb import set_trace


def parse_move_from_line(line):
    line = line.replace("move ", "").replace("from", ",").replace("to", ",")
    line = line.split(",")
    line = [int(x.strip()) for x in line]
    return line


def apply_move(move, stacks, mode):
    """mode single or mult"""
    amount = move[0]
    start_idx = move[1] - 1
    end_idx = move[2] - 1
    if mode == "single":
        for i in range(amount):
            picked = stacks[start_idx].pop()
            stacks[end_idx].append(picked)
        return stacks
    elif mode == "mult":
        # set_trace()
        picked = stacks[start_idx][-amount:]
        picked.reverse()
        for crate in picked:
            stacks[start_idx].pop()

        # set_trace()
        for i in range(amount):
            stacks[end_idx].append(picked.pop())
        return stacks
    else:
        print("ERROR BAD ARGUMENT")


def split_lines(lines):
    lines = [line[:-1] for line in lines]
    emptyline_idx = lines.index("")
    lines_stacks = lines[:(emptyline_idx)]
    lines_stacks = [line.replace(" ", "#") for line in lines_stacks]
    lines_moves = lines[(emptyline_idx + 1) :]
    lines_stacks.pop(-1)
    lines_stacks = [line.replace("####", "[&]") for line in lines_stacks]
    lines_stacks = [line.replace("#", "") for line in lines_stacks]
    lines_stacks = [line.replace("[", "").replace("]", "") for line in lines_stacks]
    return (lines_moves, lines_stacks)


def stacks_from_lines_stacks(lines_stacks):
    num_of_stacks = len(lines_stacks[0])
    stack_list = [[] for i in range(num_of_stacks)]
    for line in lines_stacks:
        for char_idx in range(num_of_stacks):
            if line[char_idx] != "&":
                stack_list[char_idx].append(line[char_idx])
    [stack.reverse() for stack in stack_list]
    return stack_list


# input_file_path = r"./day5/input_test.txt"
input_file_path = r"./day5/input.txt"


file_object = open(input_file_path, "r")
lines = file_object.readlines()

processed_lines_tuple = split_lines(lines)
lines_moves = processed_lines_tuple[0]
lines_stacks = processed_lines_tuple[1]
stack_list = stacks_from_lines_stacks(lines_stacks)

# Perform moves 5A
ctr = 1
for moveline in lines_moves:
    print("AFTER move nr ", ctr, "--------------------------\n")
    stack_list = apply_move(parse_move_from_line(moveline), stack_list, "single")
    print(stack_list)

    ctr += 1
# print(stack_list)

stack_tops = [x[-1] for x in stack_list]
print("EXC 5A: ", stack_tops)
stack_tops_onestring = "".join([item for item in stack_tops])
print("EXC 5A conc: ", stack_tops_onestring)
print("--------------------------------------------------")
print("--------------------------------------------------")
input_file_path_B = input_file_path
file_object = open(input_file_path, "r")
lines = file_object.readlines()

# Perform moves 5B
# Parse
processed_lines_tuple = split_lines(lines)
lines_moves = processed_lines_tuple[0]
lines_stacks = processed_lines_tuple[1]
# num_of_stacks = processed_lines_tuple[2]
stack_list = stacks_from_lines_stacks(lines_stacks)

print("FOR B   ", stack_list)
ctr = 1
for moveline in lines_moves:
    print("AFTER move nr ", ctr, "--------------------------\n")
    stack_list = apply_move(parse_move_from_line(moveline), stack_list, "mult")
    print(stack_list)
    ctr += 1

stack_tops = [x[-1] for x in stack_list]
print("EXC 5B: ", stack_tops)
stack_tops_onestring = "".join([item for item in stack_tops])
print("EXC 5B conc: ", stack_tops_onestring)
